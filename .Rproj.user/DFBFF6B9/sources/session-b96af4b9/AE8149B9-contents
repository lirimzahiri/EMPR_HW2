---
title: "Homework 2 - Exploratory Data Analysis"
author: "Mouad Medini & Lirim Zahiri"
date: "`r Sys.Date()`"
output:
  pdf_document:
    number_sections: true
    toc: true
---

# Preparation

```{r setup, include=FALSE}
# Initial Setup: Suppress output from code setup chunk
knitr::opts_chunk$set(echo = TRUE)

# Load necessary libraries for data analysis and visualization
library(tidyverse)  # Main library for data manipulation and analysis (includes ggplot2, dplyr, tidyr, etc.)
library(ggridges)   # Extension for ggplot2 to create ridge plots
library(janitor)    # For data cleaning and adding utility functions like "clean_names()"
library(nycflights13)  # Dataset package for practicing data manipulation and analysis
library(readxl)  # For importing Excel files into R
```

# Task 1: Days with temperatures below 10°C at Newark Airport

```{r task1}
# Exploring the weather dataset
glimpse(weather)
?weather

# Filter and count for temperatures below 10°C (10° in Fahrenheit = 50) at Newark (EWR)
weather |>
  filter(origin == "EWR", temp < 50) |>
  group_by(month, date = as.Date(time_hour)) |>
  summarize(days_below_10 = n(), .groups = "drop") |>
  count(month, name = "days_below_10")
```

*(Slides used: EMPR_05_Data_Transformation_I_AS2024.pdf, EMPR_08a_EDA_AS2024.pdf)*

# Task 2: Analyze flights missing `dep_time`

```{r task2}
# Flights with missing `dep_time` in january
flights |>
  filter(month == 1, is.na(dep_time))
```

*(Slides used: EMPR_05_Data_Transformation_I_AS2024.pdf)*

# Task 3: Visualizing temperatures

```{r task3}
# Select all variables except those between year and hour
# Add the month column from time_hour
weather_filtered <- weather |>
  select(-(year:hour)) |>
  mutate(month = month(time_hour))

# Visualization a
weather_filtered |>
  mutate(month = factor(month, labels = month.name)) |> # Convert month numbers to full names
  ggplot(aes(x = temp)) +
  geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
  facet_wrap(~ month, ncol = 3) +
  labs(title = "Temperature Distribution by Month", x = "Temperature (°F)", y = "Count") +
  theme_minimal()

# Ridge plot
weather_filtered |>
  mutate(month = factor(month, labels = month.name)) |> # Convert month numbers to full names
  ggplot(aes(x = temp, y = month)) +
  geom_density_ridges(scale = 0.9, fill = "skyblue", alpha = 0.7) + # Ridge plot
  labs(
    title = "Temperature Distribution by Month (Ridge Plot)",
    x = "Temperature (°F)",
    y = "Month"
  ) +
  theme_minimal()

# Aggregate data with weather_filtered
agg_data <- weather_filtered |>
  group_by(month) |>
  summarize(
    avg_temp = mean(temp, na.rm = TRUE),
    sd_temp = sd(temp, na.rm = TRUE),
    n = n()
  )

# Plot with explicit confidence interval calculation during visualization
ggplot(agg_data, aes(x = month, y = avg_temp)) +
  geom_line(size = 1, color = "blue") +                              # Line for average temperature
  geom_ribbon(
    aes(
      ymin = avg_temp - 3 * (sd_temp / sqrt(n)),                     # Lower 99% CI
      ymax = avg_temp + 3 * (sd_temp / sqrt(n))                      # Upper 99% CI
    ),
    fill = "lightblue", alpha = 0.4
  ) +
  scale_x_continuous(breaks = 1:12, labels = 1:12) +                 # Numeric month labels
  labs(
    title = "Monthly Average Temperature with 99% Confidence Intervals",
    x = "Month (Number)", y = "Average Temperature (°F)"
  ) +
  theme_minimal()
```

*(Slides used: EMPR_03_Visualization1_AS2024.pdf, EMPR_07_Data_Tidying_AS2024,EMPR_05_Data_Transformation_I_AS2024, EMPR_08a_EDA_AS2024.pdf)*

# Task 4: Data cleaning from `Data_HW2.xlsx`

```{r task4}
# Import and cleaning the dataset
# Referenced from slides: EMPR_06_Import_Export_AS2024.pdf
data <- read_excel("Data_HW2.xlsx", sheet = "A very small sample")

data |> glimpse() |>
  summary()

data_clean <- data |> 
  clean_names() |> 
  mutate(
    # Convert class and gender to factors
    class = factor(class),
    gender = factor(gender),
    
    # Correct date_of_birth: Handle standard dates and Excel serial numbers
    date_of_birth = case_when(
      str_detect(date_of_birth, "^\\d{4}-\\d{2}-\\d{2}$") ~ as.Date(date_of_birth),  # Standard YYYY-MM-DD
      str_detect(date_of_birth, "^\\d+$") ~ as.Date(as.numeric(date_of_birth), origin = "1899-12-30"),  # Excel serial
      TRUE ~ NA_Date_  # Assign NA if unparseable
    ),
    
    # Correct height: Use parse_number to extract numeric values and handle cm/m conversion
    height = case_when(
      str_detect(height, "m") ~ parse_number(height) * 100,  # Convert "1,82m" to 182
      TRUE ~ parse_number(height)  # Parse "cm" values directly
    ) / 100,  # Fix incorrect scaling
    
    # Handle hair: Replace "Glatze" with "0" and convert to numeric
    hair = parse_number(if_else(hair == "Glatze", "0", hair)),
    
    # Standardize eye_colour, keeping combinations but removing "/"
    eye_colour = str_replace_all(
      eye_colour,
      regex("braun|brown", ignore_case = TRUE), "brown"
    ) |> str_replace_all(
      regex("blau|blue", ignore_case = TRUE), "blue"
    ) |> str_replace_all(
      regex("grün|green", ignore_case = TRUE), "green"
    ) |> str_replace_all(
      regex("grau|grey|gray", ignore_case = TRUE), "grey"
    ) |> str_replace_all(
      regex("schwarz|black", ignore_case = TRUE), "black"
    ) |> str_replace_all(
      "/", " "  # Replace "/" with a space
    ) |> str_squish()  # Remove extra spaces
  ) |> 
  glimpse()

# Step 4: Save the cleaned data
write_rds(data_clean, "data_clean.rds")

# Step 5: Verify cleaned data
glimpse(data_clean)
```

*(Slides used: EMPR_05_Data_Transformation_I_AS2024)*

# Task 5: Anscombe's Dataset

## Part (a): Transform the Dataset into Tidy Format

```{r task5_part_a}
# Transform Anscombe's dataset into tidy format

anscombe |> glimpse()

tidy_anscombe <- anscombe |>
  pivot_longer(
    cols = everything(),
    names_to = c(".value", "sample"),
    names_pattern = "(.)(.)"
  ) |>
  glimpse()

# Save the tidy dataset for future use
saveRDS(tidy_anscombe, file = "tidy_anscombe.rds")
```

*(Slides used: EMPR_07_Data_Tidying_AS2024)*

## Part (b): Scatterplot with Best Fit Lines

```{r task5_part_b}
# Load the tidy dataset
tidy_anscombe <- readRDS("tidy_anscombe.rds")

# Scatterplot with best fit lines
ggplot(tidy_anscombe, aes(x = x, y = y, color = sample, shape = sample)) +
  geom_point(size = 3) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_shape_manual(values = c(12, 10, 9, 7)) +
  labs(
    title = "Anscombe's Datasets: Scatterplot with Best Fit Lines",
    x = "x",
    y = "y",
    color = "Sample",
    shape = "Sample"
  ) +
  theme_minimal()
```

*(Slides used: EMPR_03_Visualization1_AS2024)*

## Part (c): Summarize the Tidy Dataset

```{r task5_part_c}
# Summarize the tidy dataset and display using kableExtra in a single pipeline
tidy_anscombe |>
  group_by(sample) |>
  summarise(
    mean_x = mean(x),
    mean_y = mean(y),
    sd_x = sd(x),
    sd_y = sd(y),
    corr_xy = cor(x, y)
  ) |>
  kableExtra::kable(
    caption = "Summary of Anscombe's Dataset",
    col.names = c("Sample", "Mean x", "Mean y", "SD x", "SD y", "Correlation"),
    digits = 3
  )
```

*(Slides used: EMPR_05_Data_Transformation_I_AS2024, EMPR_03_Visualization1_AS2024)*

## Part (d): Facet Grid Scatterplots

```{r task5_part_d}
# Scatterplots with facet grid per sample
ggplot(tidy_anscombe, aes(x = x, y = y)) +
  geom_point(aes(color = sample, shape = sample), size = 3) +
  geom_smooth(method = "lm", se = FALSE, color = "black") +
  facet_grid(. ~ sample) +
  scale_shape_manual(values = c(12, 10, 9, 7)) +
  labs(
    title = "Anscombe's Datasets: Facet Grid Scatterplots",
    x = "x",
    y = "y",
    color = "Sample",
    shape = "Sample"
  ) +
  theme_minimal()
```

*(Slides used: EMPR_03_Visualization1_AS2024)*

