# Initial Setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  # Main library for data analysis
library(nycflights13)  # Dataset for tasks 1-3
library(readxl)  # For Excel imports
# Exploring the weather dataset
glimpse(weather)
# Single pipeline solution for Task 1
low_temp_count <- weather %>%
filter(temp < 10, origin == "EWR") %>%
mutate(date = as.Date(time_hour), month = lubridate::month(date, label = TRUE)) %>%
group_by(month) %>%
summarise(days_below_10 = n(), .groups = "drop")
# Display the result
low_temp_count
# Additional checks to make sure that the result is correctly 0
# Check if EWR does exist in the weather dataset
unique(weather$origin)
# Check if filtering has worked correctly
weather %>%
filter(temp < 10, origin == "EWR") %>%
glimpse()
# Flights with missing `dep_time`
missing_dep_time <- flights %>%
filter(is.na(dep_time)) %>%
summarise(across(everything(), ~ sum(is.na(.))))
missing_dep_time
# Initial Setup
library(tinytex)
# Initial Setup
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  # Main library for data analysis
library(nycflights13)  # Dataset for tasks 1-3
library(readxl)  # For Excel imports
tinytex::is_tinytex()
# Initial Setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  # Main library for data analysis
library(nycflights13)  # Dataset for tasks 1-3
library(readxl)  # For Excel imports
# Flights with missing `dep_time`
missing_dep_time <- flights |>
filter(is.na(dep_time)) |>
summarise(across(everything(), ~ sum(is.na(.))))
missing_dep_time
# Flights with missing `dep_time`
flights |>
filter(month == 1, is.na(dep_time)) |>
summarize(across(everything(), ~ sum(is.na(.))))
# Flights with missing `dep_time` in january
flights |>
filter(month == 1, is.na(dep_time))
# Flights with missing `dep_time` in january
flights |>
filter(month == 1, is.na(dep_time))
flights |>
filter(month == 1, is.na(dep_time)) |>
summarize(across(everything(), ~ sum(is.na(.)) > 0)) |>
pivot_longer(cols = everything(), names_to = "variable", values_to = "is_missing") |>
filter(is_missing == TRUE)
# Flights with missing `dep_time` in january
flights |>
filter(month == 1, is.na(dep_time))
# flights |>
#   filter(month == 1, is.na(dep_time)) |>
#   summarize(across(everything(), ~ sum(is.na(.)) > 0)) |>
#   pivot_longer(cols = everything(), names_to = "variable", values_to = "is_missing") |>
#   filter(is_missing == TRUE)
# Select relevant variables and visualize
# Filter, transform, and visualize the weather data
temp_plot <- weather |>
filter(!is.na(temp)) |>  # Remove missing temperature values
mutate(month = lubridate::month(time_hour, label = TRUE)) |>  # Extract month as a labeled factor
ggplot(aes(x = temp, fill = as.factor(month))) +
geom_histogram(binwidth = 5, color = "black", position = "dodge") +
labs(
title = "Temperature Distribution",
x = "Temperature (°C)",
y = "Frequency",
fill = "Month"
)
temp_plot
# Select relevant variables and visualize
# Filter, transform, and visualize the weather data
temp_plot <- weather |>
filter(!is.na(temp)) |>  # Remove missing temperature values
mutate(month = lubridate::month(time_hour, label = TRUE)) |>  # Extract month as a labeled factor
ggplot(aes(x = temp, fill = as.factor(month))) +
geom_histogram(binwidth = 5, color = "black", position = "dodge") +
labs(
title = "Temperature Distribution",
x = "Temperature (C)",
y = "Frequency",
fill = "Month"
)
temp_plot
# Visualization a
weather_filtered |>
mutate(month = factor(month, labels = month.name)) |> # Convert month numbers to names
ggplot(aes(x = temp)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
facet_wrap(~ month, ncol = 3) +
labs(title = "Temperature Distribution by Month", x = "Temperature (°F)", y = "Count") +
theme_minimal()
# Select all variables except those between year and hour
weather_filtered <- weather |>
select(-(year:hour))
# Visualization a
weather_filtered |>
mutate(month = factor(month, labels = month.name)) |> # Convert month numbers to names
ggplot(aes(x = temp)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
facet_wrap(~ month, ncol = 3) +
labs(title = "Temperature Distribution by Month", x = "Temperature (°F)", y = "Count") +
theme_minimal()
install.packages("ggridges")
library(ggridges)
# Select all variables except those between year and hour
weather_filtered <- weather |>
select(-(year:hour)) |>
ggplot(weather_filtered, aes(x = temp, y = month))
# Select all variables except those between year and hour
weather_filtered <- weather |>
select(-(year:hour)) |>
# Visualization a
weather_filtered |>
ggplot(aes(x = temp)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
facet_wrap(~ month, ncol = 3) +
labs(title = "Temperature Distribution by Month", x = "Temperature (°F)", y = "Count") +
theme_minimal()
# Select all variables except those between year and hour
weather_filtered <- weather |>
select(-(year:hour)) |>
# Visualization a
weather_filtered |>
ggplot(aes(x = temp)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
facet_wrap(~ month, ncol = 3) +
labs(title = "Temperature Distribution by Month", x = "Temperature (°F)", y = "Count") +
theme_minimal()
# Select all variables except those between year and hour
weather_filtered <- weather |>
select(-(year:hour))
# Visualization a
weather_filtered |>
ggplot(aes(x = temp)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
facet_wrap(~ month, ncol = 3) +
labs(title = "Temperature Distribution by Month", x = "Temperature (°F)", y = "Count") +
theme_minimal()
weather_filtered
view(weather)
view(weather_filtered)
head(weather_filtered)
# Select all variables except those between year and hour
# Add the month column from time_hour
weather_filtered <- weather |>
select(-(year:hour)) |>
mutate(month = month(time_hour))
# Visualization a
weather_filtered |>
mutate(month = factor(month, labels = month.name)) |> # Convert month numbers to names
ggplot(aes(x = temp)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
facet_wrap(~ month, ncol = 3) +
labs(title = "Temperature Distribution by Month", x = "Temperature (°F)", y = "Count") +
theme_minimal()
# Select all variables except those between year and hour
# Add the month column from time_hour
weather_filtered <- weather |>
select(-(year:hour)) |>
mutate(month = month(time_hour))
# Visualization a
weather_filtered |>
mutate(month = factor(month, labels = month.name)) |> # Convert month numbers to full names
ggplot(aes(x = temp)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
facet_wrap(~ month, ncol = 3) +
labs(title = "Temperature Distribution by Month", x = "Temperature (°F)", y = "Count") +
theme_minimal()
# Ridge plot
weather_filtered |>
mutate(month = factor(month, labels = month.name)) |> # Convert month numbers to full names
ggplot(aes(x = temp, y = month)) +
geom_density_ridges(scale = 0.9, fill = "skyblue", alpha = 0.7) + # Ridge plot
labs(
title = "Temperature Distribution by Month (Ridge Plot)",
x = "Temperature (°F)",
y = "Month"
) +
theme_minimal()
# Aggregate data with weather_filtered
agg_data <- weather_filtered |>
group_by(month) |>
summarize(
avg_temp = mean(temp, na.rm = TRUE),
sd_temp = sd(temp, na.rm = TRUE),
n = n()
)
# Plot with explicit confidence interval calculation during visualization
ggplot(agg_data, aes(x = month, y = avg_temp)) +
geom_line(size = 1, color = "blue") +                              # Line for average temperature
geom_ribbon(
aes(
ymin = avg_temp - 3 * (sd_temp / sqrt(n)),                     # Lower 99% CI
ymax = avg_temp + 3 * (sd_temp / sqrt(n))                      # Upper 99% CI
),
fill = "lightblue", alpha = 0.4
) +
scale_x_continuous(breaks = 1:12, labels = 1:12) +                 # Numeric month labels
labs(
title = "Monthly Average Temperature with 99% Confidence Intervals",
x = "Month (Number)", y = "Average Temperature (°F)"
) +
theme_minimal()
# Import and cleaning the dataset
# Referenced from slides: EMPR_06_Import_Export_AS2024.pdf
data <- read_excel("Data_HW2.xlsx", sheet = "A very small sample")
# Import and cleaning the dataset
# Referenced from slides: EMPR_06_Import_Export_AS2024.pdf
data <- read_excel("Data_HW2.xlsx", sheet = "A very small sample")
